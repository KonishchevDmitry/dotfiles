#!/bin/bash
#
# Since macOS doesn't have a decent packaging system with a lot of packages, all of them are installed using Homebrew
# and language-specific package managers. In this case it's much easier to handle all of this mess by script like this
# which allows to clear all accumulated garbage and reinstall all required packages by one simple command.
#

set -eu
shopt -s extglob

install-all() {
    if is-macos; then
        which -s brew || install-brew
        update-brew
        install-brew-packages
        post-install-brew-packages
    fi

    install-rust-packages
    install-python-packages

    cleanup-caches

    log "Installation finished successfully."
}

uninstall-all() {
    cleanup-caches

    uninstall-python-packages
    uninstall-rust-packages

    if is-macos && [ -d "$prefix" ]; then
        uninstall-brew-packages
        rm -f ~/.brew_profile
        uninstall-brew
    fi

    log "Uninstallation finished successfully."

    if ! is-macos; then
        check-directory "$(python3 -m site --user-site)"
    fi
}

upgrade-all() {
    log "Upgrading all installed packages..."

    (
        set -x
        brew update
        brew upgrade
    )

    post-install-brew-packages

    (
        set -x
        rustup update
        cargo install-update --all
    )

    cleanup-caches

    log "Upgrade finished successfully."
}

install-brew() {
    log "Installing Homebrew..."
    bash <(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)

    configure-environment
    set +u
        . ~/.brew_profile
    set -u
    sanitize-environment

    brew doctor
}

update-brew() {
    log "Updating Homebrew..."

    if ! curl -fL --connect-timeout 1 "$arc_tap" > /dev/null 2>&1; then
        die "Please connect to the Intranet."
    fi

    brew update
    brew upgrade
}

uninstall-brew() {
    log "Uninstalling Homebrew..."

    if [ -e "$prefix/bin/brew" ]; then
        /bin/bash <(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh) --dry-run    
        question-user "process"
        /bin/bash <(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)
    fi

    question-user "delete $prefix"
    log "Deleting $prefix..."
    sudo rm -rf "$prefix"
}

configure-environment() {
    local gnubin_path="$(find -L "$prefix/opt" -name gnubin | sort | tr '\n' :)"
    local gnuman_path="$(find -L "$prefix/opt" -name gnuman | sort | tr '\n' :)"

    cat > ~/.brew_profile <<EOF
#!/bin/sh
#
# Configures environment for Homebrew (auto-generated by deploy-laptop)
#

[ -n "\$MANPATH" ] || export MANPATH=/usr/local/share/man:/usr/share/man
[ -n "\$INFOPATH" ] || export INFOPATH=/usr/local/share/info:/usr/share/info

PATH="$gnubin_path$prefix/bin:$prefix/sbin:\$PATH"
MANPATH="$gnuman_path$prefix/share/man:\$MANPATH"
INFOPATH="$prefix/share/info:\$INFOPATH"
EOF
}

sanitize-environment() {
    # Homebrew complains that putting non-prefixed GNU utils in PATH can cause builds to fail
    PATH="$(tr : '\n' <<< "$PATH" | grep -v '/gnubin$' | tr '\n' :)"
}

install-brew-packages() {(
    log "Installing Homebrew packages..."
    set -x

    # Homebrew's bash in contrast to system's bash supports completion
    #
    # Don't forget to set '$prefix/bin/bash -l' as a shell in the terminal emulator
    brew install bash bash-completion pip-completion vagrant-completion

    brew install gnu-getopt
    [ -h "$prefix/bin/getopt" ] || ln -s "$prefix/opt/gnu-getopt/bin/getopt" "$prefix/bin/getopt"

    brew install coreutils diffutils findutils gawk gnu-sed gnu-tar gpatch grep less make

    brew install ansible git gnupg htop httpie jq lf mosh ncdu pstree ripgrep rsync \
        sslscan syncthing telnet terminal-notifier terraform tmux tree vim wakeonlan watch

    brew install mutt
    sudo chgrp mail "$prefix/opt/mutt/bin/mutt_dotlock"
    sudo chmod g+s "$prefix/opt/mutt/bin/mutt_dotlock"

    go_version=1.19
    brew install "go@$go_version" && brew link "go@$go_version"
    brew install python

    # Development libraries
    brew install libxml2 openssl
    brew link --force openssl

    brew install --cask macfuse
    brew tap yandex/arc "$arc_tap" && brew install arc-launcher
)}

post-install-brew-packages() {
    (
        set -x
        brew services restart syncthing
    )
    configure-environment
}

uninstall-brew-packages() {
    [ -e "$prefix/bin/brew" ] || return 0

    log "Uninstalling brew packages..."

    # Execute list commands twice since the first execution may trigger formulae update which produces additional output
    brew list > /dev/null && brew list | xargs -r brew uninstall --force
    hash -r # Clear bash command path cache

    brew tap > /dev/null && brew tap | grep -vE '^homebrew/core$' | xargs -r brew untap
}

install-rust-packages() {
    log "Installing Rust packages..."

    if ! which -s rustup; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    fi
    source ~/.cargo/env

    (
        set -x
        cargo install cargo-cache cargo-edit cargo-release cargo-update investments vsb
    )
}

uninstall-rust-packages() {
    which -s cargo || return 0

    log "Uninstalling Rust packages..."
    (
        set -o pipefail
        cargo install --list | sed -rn 's/^([^[:space:]]+) v([^:]+):$/\1@\2/p' | xargs -r cargo uninstall
    )
}

install-python-packages() {
    log "Installing Python packages..."

    local script script_type requirements
    local install=install

    if ! is-macos; then
        install="$install --user"
    fi

    pip3 $install --disable-pip-version-check --upgrade pip
    pip3 $install -U ipython pyyaml TxtStyle

    shopt -s nullglob
        for script in ~/bin/* ~/.local/bin/*; do
            script_type="$(file --mime-type --brief "$script")"
            [ "$script_type" = 'text/x-script.python' ] || continue

            requirements="$(get-script-requirements "$script")"
            [ -z "$requirements" ] || pip3 $install -U $requirements
        done
    shopt -u nullglob
}

uninstall-python-packages() {
    local version pip packages package package_info list=list flags=--disable-pip-version-check site_prefix

    if ! is-macos; then
        list="$list --user"
    fi

    shopt -s nullglob
        for version in 2 3 ; do
            pip=pip$version

            if is-macos; then
                which -s "$pip" || continue
                site_prefix="$prefix"
            else
                pip=/usr/bin/$pip
                site_prefix="$(python$version -m site --user-site)"
            fi

            log "Uninstalling Python$version packages..."
            packages="$($pip $list $flags --format=freeze)"

            for package in $(awk -F == '{ print $1 }' <<< "$packages"); do
                if is-macos; then
                    # Don't uninstall pip and setuptools to not break pip
                    if [[ "$package" == pip || "$package" == setuptools ]]; then
                        continue
                    fi

                    # Skip distutils installed packages that can't be uninstalled
                    if [[ "$package" == gpg || "$package" == PyGObject ]]; then
                        continue
                    fi
                fi

                package_info="$($pip show $flags "$package")"

                # Filter out system packages
                grep -qE "^Location: $site_prefix" <<< "$package_info" || continue

                $pip uninstall $flags -y "$package"
            done
        done
    shopt -u nullglob
}

cleanup-caches() {
    log "Cleaning up caches..."
    (
        set -x

        if which -s brew; then
            brew cleanup
        fi

        if which -s cargo-cache; then
            cargo cache --keep-duplicate-crates 0
            cargo cache --autoclean-expensive
        fi

        if which -s go; then
            go clean -cache -modcache -testcache -fuzzcache
        fi
    )
}

check-directory() {
    local dir="$1" white_list="${2:-}" contents
    [ -d "$dir" ] || return 0

    contents="$(ls -1A "$dir")"
    [ -z "$white_list" ] || contents="$(grep -vE "$white_list" <<< "$contents")"

    contents="$(
        while read subdir; do
            [ "$(ls -1A "$dir/$subdir")" = "" ] || echo "$subdir"
        done <<< "$contents"
    )"

    if [ -n "$contents" ]; then
        log "Warning: $dir contains the following files:"$'\n'"$contents" >&2
    fi
}

question-user() {
    local answer

    echo -n "Are you sure want to $1? (y/n) "
    read answer

    [ "$answer" = "y" ] || return 1
}

log() {
    echo $'\n'"> $@"
}

die() {
    echo "$@" >&2
    exit 1
}

is-macos() {
    [ "$(uname)" = Darwin ]
}

show-usage() {
    die "Usage: $0 {install|upgrade|uninstall}"
}

if [ $# -ne 1 ]; then
    show-usage
fi

if [ "$(whoami)" = root ]; then
    die "The script must be run from user."
fi

if is-macos; then
    prefix=/opt/homebrew
    arc_tap=https://arc-vcs.yandex-team.ru/homebrew-tap
    sanitize-environment
fi

case $1 in
    "install") question-user "install all required packages" && install-all ;;
    "upgrade") question-user "upgrade all installed packages" && upgrade-all ;;
    "uninstall") question-user "uninstall all packages" && uninstall-all ;;
    *) show-usage ;;
esac
