#!/bin/bash
#
# Since OS X doesn't have a decent packaging system with a lot of packages,
# all of them are installed using Homebrew, pip and npm. In this case it's
# much easier to handle all of this mess by script like this which allows to
# clear all accumulated garbage and reinstall all required packages by one
# simple command.
#

set -eu
shopt -s extglob

git_package() {
    echo -n "git+ssh://git@konishchev.ru/~git/$1.git"
}

github_package() {
    echo -n "https://github.com/KonishchevDmitry/$1/archive/master.zip"
}

uninstall_pip_packages() {
    echo "Uninstalling pip packages..."

    local pip package

    shopt -s nullglob
        for pip in "$prefix"/bin/pip+([[:digit:]]).+([[:digit:]]) ; do
            for package in $("$pip" list | cut -f 1 -d ' '); do
                # Don't uninstall pip and setuptools to not break pip
                [ "$package" != "pip" -a "$package" != "setuptools" ] || continue

                # Filter out system packages
                "$pip" show "$package" | egrep "^Location: $prefix" >/dev/null || continue

                "$pip" uninstall -y "$package"
            done
        done
    shopt -u nullglob
}

uninstall_brew_distro() {
    echo "Uninstalling Homebrew distributive files..."

    [ -d "$prefix/.git" ] || return 0

    (
        cd "$prefix"

        git ls-files -z | xargs -0 rm -f
        [ ! -d Library ] || find Library -name .gitignore -print0 | xargs -0 rm

        git ls-tree --name-only -d -r -z HEAD | sort -rz | xargs -0 -n 1 -- sh -c '
            if [ -d "$0" ] && [ -z "$(ls -A "$0")" ]; then
                rmdir "$0"
            fi
        '

        rm -rf .git
    )
}

cleanup_brew_files() {
    cd "$prefix" && (
        rm -f share/info/dir
        rm -rf lib/python+([[:digit:]]).+([[:digit:]])

        for dir in bin lib share Library Cellar; do
            [ ! -d "$dir" ] || find "$dir" -type d -empty -delete
        done
    )
}

check_directory() {
    local dir="$1"
    local white_list="$2"

    [ -d "$dir" ] || return 0

    local contents="$(ls -1A "$dir" | egrep -v "$white_list")"

    if [ -n "$contents" ]; then
        echo "Warning: $dir contains the following files:" >&2
        echo "$contents" >&2
    fi
}

uninstall_packages() {
    # PyCharm's IdeaVim plugin changes default keyboard settings. To revert
    # them:
    # defaults delete -gÂ ApplePressAndHoldEnabled

    [ -d "$prefix" ] || die "Homebrew is not installed to $prefix."

    uninstall_pip_packages

    if [ -e "$prefix/bin/brew" ]; then
        echo "Uninstalling brew packages..."
        brew list | xargs brew uninstall
        brew tap | xargs brew untap
    fi

    uninstall_brew_distro
    cleanup_brew_files

    echo "Uninstallation finished successfully."

    check_directory "$prefix" '^(bin|etc|munki|var)$'
}

install_packages() {
    echo "Updating Homebrew..."

    if which -s brew; then
        brew update
        brew upgrade
    else
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew doctor
    fi

    echo "Installing all packages..."; set -x

    # Homebrew's bash in contrast to system's bash supports completion
    #
    # Don't forget to set '$prefix/bin/bash -l' as a shell in the terminal
    # emulator
    brew install bash bash-completion
    brew install homebrew/completions/pip-completion homebrew/completions/vagrant-completion

    brew install gnu-getopt
    brew ln gnu-getopt --force

    brew install ack dsh git httpie htop mutt pstree svn tmux tree vim macvim watch

    # OS notifications from scripts
    brew install terminal-notifier

    brew install python python3
    pip install -U ipython jedi pyflakes pythonpy virtualenv virtualenvwrapper
    pip3 install -U pyvsb $(github_package pydeposits) # $(git_package credit-calculator)

    brew install encfs mongodb

    set +x; echo "Installation finished successfully."
}

question_user() {
    local answer
    echo -n "Are you sure want to $1? (y/n) "
    read answer
    [ "$answer" = "y" ]
}

die() {
    echo "$@" >&2
    exit 1
}

show_usage() {
    die "Usage: $0 {install|uninstall}"
}

if [ $# -ne 1 ]; then
    show_usage
fi

if [ "$(whoami)" = root ]; then
    die "The script must be run from user."
fi

prefix=/usr/local

case $1 in
    "install") question_user "install all required packages" && install_packages ;;
    "uninstall") question_user "uninstall all required packages" && uninstall_packages ;;
    *) show_usage ;;
esac
