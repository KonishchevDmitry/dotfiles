#!/bin/sh
#
# Configures user dotfiles
#

set -eu

show_help() {
    cat <<EOF
usage: $1 [-h] [-f]

Configures user dotfiles.

optional arguments:
  -h, --help    show this help message and exit
  -f, --force   force reinstall from scratch
EOF
}

parse_args() {
    eval set -- "$@"

    while [ $# -gt 0 ]; do
        case "$1" in
            -h) show_help "$0"; exit 0;;
            -f|--force) force_reinstall=1;;
            --) shift; break;;
            (-*) die "Unrecognized option: $1.";;
            (*) break;;
        esac
        shift
    done

    [ $# -eq 0 ] || die "Invalid parameter: $1."
}

die() {
    echo "Error:" "$@" >&2
    exit 1
}

clone_repository() {
    local url="$1"
    rm -rf "$clone_dir" && \
        git clone --no-checkout "$url" "$clone_dir" && \
        mv "$clone_dir/.git" "$git_dir" && rmdir "$clone_dir"
}

dotfiles_git() {
    (cd ~ && git --git-dir "$git_dir" "$@")
}

main() {
    local force_params=""

    if [ "$force_reinstall" -ne 0 ]; then
        force_params="--force"
        rm -rf "$git_dir"
    fi

    if [ -d "$git_dir" ]; then
        dotfiles_git pull
    else
        clone_repository git@github.com:KonishchevDmitry/dotfiles.git || \
            clone_repository https://github.com/KonishchevDmitry/dotfiles.git
        dotfiles_git reset --hard
    fi

    ~/.vim/bin/update-plugins $force_params
    ~/.vim/bin/update-spell
}

force_reinstall=0
git_dir=~/.git-dir
clone_dir=~/.dotfiles

options="$(getopt -n "$0" -o hf -l help,force -- "$@")"
parse_args "$options"

main
