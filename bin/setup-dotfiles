#!/bin/sh
#
# Configures user dotfiles
#

set -eu

show_help() {
    cat <<EOF
usage: $1 [-h] [-f] [-p ROLE]

Configures user dotfiles.

optional arguments:
  -h, --help                show this help message and exit
  -f, --force               force reinstall from scratch
  -p, --with-private ROLE   configure the specified private dotfiles
EOF
}

parse_args() {
    eval set -- "$@"

    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help) show_help "$0"; exit 0;;
            -f|--force) force_reinstall=1;;
            -p|--with-private)
                with_private_dotfiles="$2"
                [ -n "$with_private_dotfiles" ] || die "Invalid role."
                shift;;
            --) shift; break;;
            (-*) die "Unrecognized option: $1.";;
            (*) break;;
        esac
        shift
    done

    [ $# -eq 0 ] || die "Invalid parameter: $1."
}

error() {
    echo "Error:" "$@" >&2
}

die() {
    error "$@"
    exit 1
}

cleanup() {
    [ -z "$temp_dir" ] || rm -rf "$temp_dir"
}

create_git_ssh_command() {
    [ ! -x "$git_ssh" ] || return 0

    cat > "$git_ssh" <<EOF
#!/bin/sh
exec ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "\$@"
EOF
    chmod a+x "$git_ssh"
}

clone_repository() {
    local url="$1"
    local clone_dir="$2"
    local git_dir="$3"

    rm -rf "$clone_dir" && create_git_ssh_command && \
        GIT_SSH="$git_ssh" git clone --no-checkout "$url" "$clone_dir" && \
        mv "$clone_dir/.git" "$git_dir" && rmdir "$clone_dir"
}

dotfiles_git() {
    local git_dir="$1"; shift
    (cd ~ && git --git-dir "$git_dir" "$@")
}

public_dotfiles_git() {
    dotfiles_git "$public_git_dir" "$@"
}

private_dotfiles_git() {
    dotfiles_git "$private_git_dir" "$@"
}

main() {
    local force_params=""

    if [ -d "$old_public_git_dir" ]; then
        if [ -d "$public_git_dir" ]; then
            error "An abandoned $old_public_git_dir is detected."
        else
            echo "Upgrading $old_public_git_dir to $public_git_dir..."
            mv "$old_public_git_dir" "$public_git_dir"
        fi
    fi

    if [ "$force_reinstall" -ne 0 ]; then
        force_params="-f"
        rm -rf "$public_git_dir"
        [ -z "$with_private_dotfiles" ] || rm -rf "$private_git_dir"
    fi

    if [ -d "$public_git_dir" ]; then
        public_dotfiles_git pull
    else
        clone_repository git@github.com:KonishchevDmitry/dotfiles.git "$public_clone_dir" "$public_git_dir" || \
            clone_repository https://github.com/KonishchevDmitry/dotfiles.git "$public_clone_dir" "$public_git_dir"

        public_dotfiles_git gc --aggressive
        public_dotfiles_git reset --hard
    fi

    if [ -n "$with_private_dotfiles" ]; then
        if [ -d "$private_git_dir" ]; then
            private_dotfiles_git pull
        else
            clone_repository "git@konishchev.ru:$with_private_dotfiles-private-dotfiles.git" "$private_clone_dir" "$private_git_dir"
            private_dotfiles_git gc --aggressive
            private_dotfiles_git reset --hard
        fi
    fi

    ~/.vim/bin/update-plugins $force_params
    ~/.vim/bin/update-spell
}

force_reinstall=0
with_private_dotfiles=""

public_git_dir=~/.git-dotfiles
old_public_git_dir=~/.git-dir
public_clone_dir=~/.dotfiles

private_git_dir=~/.git-private-dotfiles
private_clone_dir=~/.private-dotfiles

if [ "$(uname)" = Darwin -a "$(which getopt)" = /usr/bin/getopt ]; then
    options="$(getopt hfp: "$@")"
else
    options="$(getopt -n "$0" -o hfp: -l help,force,with-private: -- "$@")"
fi

parse_args "$options"

temp_dir=""
trap cleanup EXIT
trap "exit 1" INT TERM QUIT
temp_dir="$(mktemp -d "/var/tmp/dotfiles.XXXXXX")"
git_ssh="$temp_dir/git-ssh"

main
